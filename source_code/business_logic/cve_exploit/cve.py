import  requests, time
from pprint import pprint
    
class Cve:
    path = "https://services.nvd.nist.gov/rest/json/cves/2.0?"
    header ={"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 " \
                                "(KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"}

    def __init__(self, versions: str):
        assert versions is not None, "Version not exists"
        self.versions = versions

    def search_cve(self)-> dict:
        """ Research CVE given a group of services from the Scan Result. 
        Return  a dictionary with Version, CVE-id, CVE description and resources where the user can read  """
        results_tmp = {}    
        response_version = requests.get(self.path, 
                                                                    params = {"keywordSearch":  self.versions}, 
                                                                    headers=self.header)
        if response_version.status_code == 200:
            data = response_version.json()
            results_tmp[self.versions] = Cve.get_vulnerabilities(data, self.versions)
        results = results_tmp
        self.results = results
        return results

    @classmethod
    def get_vulnerabilities(cls, data: dict, version) -> dict:
        """ Create a dictionary with Version, CVE-id, CVE Description e References"""
        #results = {"vulnerabilities": []}
        results = []
        for cve in data["vulnerabilities"]:
                results.append({"id": cve["cve"]["id"],
                                                                            "description": cve["cve"]["descriptions"][0]["value"],
                                                                             "resource": cve["cve"]["references"][0]["url"]})

        return results



#cve_element = Cve("OpenSSH 4.7p1 Debian8ubuntu1")
#pprint(cve_element.search_cve())
